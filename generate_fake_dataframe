{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "14f936f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from itertools import cycle\n",
    "def generate_fake_dataframe(size, cols, col_names = None, intervals = None, seed = None):\n",
    "    \n",
    "    categories_dict = {'animals': ['cow', 'rabbit', 'duck', 'shrimp', 'pig', 'goat', 'crab', 'deer', 'bee', 'sheep', 'fish', 'turkey', 'dove', 'chicken', 'horse'],\n",
    "                       'names'  : ['James', 'Mary', 'Robert', 'Patricia', 'John', 'Jennifer', 'Michael', 'Linda', 'William', 'Elizabeth', 'Ahmed', 'Barbara', 'Richard', 'Susan', 'Salomon', 'Juan Luis'],\n",
    "                       'cities' : ['Stockholm', 'Denver', 'Moscow', 'Marseille', 'Palermo', 'Tokyo', 'Lisbon', 'Oslo', 'Nairobi', 'Río de Janeiro', 'Berlin', 'Bogotá', 'Manila', 'Madrid', 'Milwaukee'],\n",
    "                       'colors' : ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple', 'pink', 'silver', 'gold', 'beige', 'brown', 'grey', 'black', 'white']\n",
    "                      }\n",
    "    default_intervals = {\"i\" : (0,10), \"f\" : (0,100), \"c\" : (\"names\", 5), \"d\" : (\"2020-01-01\",\"2020-12-31\")}\n",
    "    rng = np.random.default_rng(seed)\n",
    "\n",
    "    first_c = default_intervals[\"c\"][0]\n",
    "    categories_names = cycle([first_c] + [c for c in categories_dict.keys() if c != first_c])\n",
    "    default_intervals[\"c\"] = (categories_names, default_intervals[\"c\"][1])\n",
    "    \n",
    "    if isinstance(col_names,list):\n",
    "        assert len(col_names) == len(cols), f\"The fake DataFrame should have {len(cols)} columns but col_names is a list with {len(col_names)} elements\"\n",
    "    elif col_names is None:\n",
    "        suffix = {\"c\" : \"cat\", \"i\" : \"int\", \"f\" : \"float\", \"d\" : \"date\"}\n",
    "        col_names = [f\"column_{str(i)}_{suffix.get(col)}\" for i, col in enumerate(cols)]\n",
    "\n",
    "    if isinstance(intervals,list):\n",
    "        assert len(intervals) == len(cols), f\"The fake DataFrame should have {len(cols)} columns but intervals is a list with {len(intervals)} elements\"\n",
    "    else:\n",
    "        if isinstance(intervals,dict):\n",
    "            assert len(set(intervals.keys()) - set(default_intervals.keys())) == 0, f\"The intervals parameter has invalid keys\"\n",
    "            default_intervals.update(intervals)\n",
    "        intervals = [default_intervals[col] for col in cols]\n",
    "    df = pd.DataFrame()\n",
    "    for col, col_name, interval in zip(cols, col_names, intervals):\n",
    "        if interval is None:\n",
    "            interval = default_intervals[col]\n",
    "        assert (len(interval) == 2 and isinstance(interval, tuple)) or isinstance(interval, list), f\"This interval {interval} is neither a tuple of two elements nor a list of strings.\"\n",
    "        if col in (\"i\",\"f\",\"d\"):\n",
    "            start, end = interval\n",
    "        if col == \"i\":\n",
    "            df[col_name] = rng.integers(start, end, size)\n",
    "        elif col == \"f\":\n",
    "            df[col_name] = rng.uniform(start, end, size)\n",
    "        elif col == \"c\":\n",
    "            if isinstance(interval, list):\n",
    "                categories = np.array(interval)\n",
    "            else:\n",
    "                cat_family, length = interval\n",
    "                if isinstance(cat_family, cycle):\n",
    "                    cat_family = next(cat_family)\n",
    "                assert cat_family in categories_dict.keys(), f\"There are no samples for category '{cat_family}'. Consider passing a list of samples or use one of the available categories: {categories_dict.keys()}\"\n",
    "                categories = rng.choice(categories_dict[cat_family], length, replace = False, shuffle = True)\n",
    "            df[col_name] = rng.choice(categories, size, shuffle = True)\n",
    "        elif col == \"d\":\n",
    "            df[col_name] = rng.choice(pd.date_range(start, end), size)\n",
    "    return df       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "442a7033",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>column_0_cat</th>\n",
       "      <th>column_1_int</th>\n",
       "      <th>column_2_float</th>\n",
       "      <th>column_3_int</th>\n",
       "      <th>column_4_float</th>\n",
       "      <th>column_5_float</th>\n",
       "      <th>column_6_int</th>\n",
       "      <th>column_7_cat</th>\n",
       "      <th>column_8_cat</th>\n",
       "      <th>column_9_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Richard</td>\n",
       "      <td>0</td>\n",
       "      <td>72.481230</td>\n",
       "      <td>9</td>\n",
       "      <td>29.679768</td>\n",
       "      <td>9.610284</td>\n",
       "      <td>0</td>\n",
       "      <td>horse</td>\n",
       "      <td>Lisbon</td>\n",
       "      <td>2020-03-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>James</td>\n",
       "      <td>1</td>\n",
       "      <td>54.706477</td>\n",
       "      <td>8</td>\n",
       "      <td>24.953516</td>\n",
       "      <td>72.643988</td>\n",
       "      <td>3</td>\n",
       "      <td>crab</td>\n",
       "      <td>Lisbon</td>\n",
       "      <td>2020-04-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mary</td>\n",
       "      <td>2</td>\n",
       "      <td>86.454165</td>\n",
       "      <td>2</td>\n",
       "      <td>84.529648</td>\n",
       "      <td>54.515580</td>\n",
       "      <td>5</td>\n",
       "      <td>fish</td>\n",
       "      <td>Lisbon</td>\n",
       "      <td>2020-08-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>John</td>\n",
       "      <td>1</td>\n",
       "      <td>50.058419</td>\n",
       "      <td>7</td>\n",
       "      <td>48.485068</td>\n",
       "      <td>42.357505</td>\n",
       "      <td>3</td>\n",
       "      <td>crab</td>\n",
       "      <td>Milwaukee</td>\n",
       "      <td>2020-03-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mary</td>\n",
       "      <td>9</td>\n",
       "      <td>46.469846</td>\n",
       "      <td>1</td>\n",
       "      <td>89.966947</td>\n",
       "      <td>44.872704</td>\n",
       "      <td>1</td>\n",
       "      <td>horse</td>\n",
       "      <td>Palermo</td>\n",
       "      <td>2020-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>James</td>\n",
       "      <td>6</td>\n",
       "      <td>90.097402</td>\n",
       "      <td>0</td>\n",
       "      <td>72.028989</td>\n",
       "      <td>97.170691</td>\n",
       "      <td>5</td>\n",
       "      <td>deer</td>\n",
       "      <td>Milwaukee</td>\n",
       "      <td>2020-02-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>Richard</td>\n",
       "      <td>1</td>\n",
       "      <td>80.054812</td>\n",
       "      <td>0</td>\n",
       "      <td>5.893240</td>\n",
       "      <td>10.753144</td>\n",
       "      <td>4</td>\n",
       "      <td>crab</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>2020-02-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>William</td>\n",
       "      <td>5</td>\n",
       "      <td>12.898549</td>\n",
       "      <td>3</td>\n",
       "      <td>29.450907</td>\n",
       "      <td>80.630179</td>\n",
       "      <td>0</td>\n",
       "      <td>crab</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>2020-12-27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>James</td>\n",
       "      <td>0</td>\n",
       "      <td>15.545684</td>\n",
       "      <td>7</td>\n",
       "      <td>5.455875</td>\n",
       "      <td>57.819139</td>\n",
       "      <td>7</td>\n",
       "      <td>deer</td>\n",
       "      <td>Madrid</td>\n",
       "      <td>2020-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>Mary</td>\n",
       "      <td>0</td>\n",
       "      <td>89.268506</td>\n",
       "      <td>7</td>\n",
       "      <td>7.079107</td>\n",
       "      <td>13.292726</td>\n",
       "      <td>1</td>\n",
       "      <td>crab</td>\n",
       "      <td>Palermo</td>\n",
       "      <td>2020-12-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    column_0_cat  column_1_int  column_2_float  column_3_int  column_4_float  \\\n",
       "0        Richard             0       72.481230             9       29.679768   \n",
       "1          James             1       54.706477             8       24.953516   \n",
       "2           Mary             2       86.454165             2       84.529648   \n",
       "3           John             1       50.058419             7       48.485068   \n",
       "4           Mary             9       46.469846             1       89.966947   \n",
       "..           ...           ...             ...           ...             ...   \n",
       "995        James             6       90.097402             0       72.028989   \n",
       "996      Richard             1       80.054812             0        5.893240   \n",
       "997      William             5       12.898549             3       29.450907   \n",
       "998        James             0       15.545684             7        5.455875   \n",
       "999         Mary             0       89.268506             7        7.079107   \n",
       "\n",
       "     column_5_float  column_6_int column_7_cat column_8_cat column_9_date  \n",
       "0          9.610284             0        horse       Lisbon    2020-03-27  \n",
       "1         72.643988             3         crab       Lisbon    2020-04-13  \n",
       "2         54.515580             5         fish       Lisbon    2020-08-05  \n",
       "3         42.357505             3         crab    Milwaukee    2020-03-04  \n",
       "4         44.872704             1        horse      Palermo    2020-12-30  \n",
       "..              ...           ...          ...          ...           ...  \n",
       "995       97.170691             5         deer    Milwaukee    2020-02-04  \n",
       "996       10.753144             4         crab       Madrid    2020-02-12  \n",
       "997       80.630179             0         crab       Madrid    2020-12-27  \n",
       "998       57.819139             7         deer       Madrid    2020-09-01  \n",
       "999       13.292726             1         crab      Palermo    2020-12-15  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fake_data_frame = generate_fake_dataframe(size = 1000, cols = 'cififficcd')\n",
    "fake_data_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2db8ecd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
